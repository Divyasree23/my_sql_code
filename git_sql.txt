DROP TABLE IF EXISTS Employee;
CREATE TABLE IF NOT EXISTS Employee (
    id INT,
    salary INT
);

INSERT INTO Employee (id, salary) VALUES
    (1, 50000),
    (2, 60000),
    (3, 55000),
    (4, 70000),
    (5, 48000),
    (6, 75000),
    (7, 62000),
    (8, 58000),
    (9, 69000),
    (10, 51000),
    (11, 69000);
	
SELECT id, salary
FROM Employee
WHERE salary = (
    SELECT MAX(salary)
    FROM Employee
    WHERE salary < (
        SELECT MAX(salary)
        FROM Employee
    )
) /*    -- Subquery for handling the case where there is no second-highest salary */
OR (
    SELECT COUNT(DISTINCT salary)
    FROM Employee
) = 1;

WITH RankedSalaries AS (
    SELECT
        id,
        salary,
        dense_rank() OVER (ORDER BY salary DESC) AS salary_rank
    FROM
        Employee
)
SELECT id, salary
FROM RankedSalaries
WHERE salary_rank = 3;

/*Rank() :- Assigns a unique rank to each distinct row based on the specified order, leaving gaps for tied values.*/
/* ROW_NUMBER():- Assigns a unique number to each row based on the specified order.*/
/* DENSE_RANK():- Assigns a unique rank to each distinct row based on the specified order, without leaving gaps for tied values.*/

#######################################################################################################################
%sql
/*Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value.*/
-- Create the Scores table
CREATE TABLE Scores (
    Id INT ,
    Score DECIMAL(4, 2)
);

-- Insert data into the Scores table
INSERT INTO Scores (Id, Score) VALUES
    (1, 3.50),
    (2, 3.65),
    (3, 4.00),
    (4, 3.85),
    (5, 4.00),
    (6, 3.65);

-- Query to rank scores using DENSE_RANK()
SELECT
    Id,
    Score,
    DENSE_RANK() OVER (ORDER BY Score DESC) AS Ranking
FROM
    Scores
ORDER BY
    Score DESC, Id;


###########################################################################################################################
%sql
-- Write a SQL query to find all numbers that appear at least three times
drop table if EXISTS Numbers;
-- Create the Numbers table
CREATE TABLE Numbers (
    Id INT ,
    Num INT
);

-- Insert data into the Numbers table
INSERT INTO Numbers (Id, Num) VALUES
    (1, 1),
    (2, 1),
    (3, 1),
    (4, 2),
    (5, 1),
    (6, 2),
    (7, 2),
    (8, 3),
    (9, 3),
    (10,3);

-- Query to find numbers appearing at least three times consecutively
SELECT DISTINCT id,Num
FROM (
    SELECT id,
        Num,
        LEAD(Num, 1) OVER (ORDER BY Id) AS NextNum,
        LEAD(Num, 2) OVER (ORDER BY Id) AS NextNextNum
    FROM
        Numbers
) AS Subquery
WHERE Num = NextNum AND Num = NextNextNum;

#################################################################################################################################
%sql
-- Create the Employee table
CREATE TABLE Employee_mg (
    Id INT ,
    Name VARCHAR(255),
    Salary INT,
    ManagerId INT
);

-- Insert data into the Employee table
INSERT INTO Employee_mg (Id, Name, Salary, ManagerId) VALUES
    (1, 'Joe', 70000, 3),
    (2, 'Henry', 80000, 4),
    (3, 'Sam', 60000, NULL),
    (4, 'Max', 90000, NULL);

SELECT E1.Name AS EmployeeName, E1.Salary AS EmployeeSalary, E2.Name AS ManagerName, E2.Salary AS ManagerSalary
FROM Employee_mg E1
JOIN Employee_mg E2 ON E1.ManagerId = E2.Id
WHERE E1.Salary > E2.Salary;

####################################################################################################################################
CREATE TABLE Person (
    Id INT ,
    Email VARCHAR(255)
);

-- Insert data into the Person table
INSERT INTO Person (Id, Email) VALUES
    (1, 'a@b.com'),
    (2, 'c@d.com'),
    (3, 'a@b.com'),
    (4,'duran@g.com');
	
select id,email from Person 
where Email in (select email from person group by email having count(*) > 1);

###################################################################################################################################